{"version":3,"sources":["components/dashboard/Project.js","components/dashboard/Dashboard.js","components/dashboard/AddProjectForm.js","App.js","serviceWorker.js","index.js"],"names":["Project","project","callback","currentDate","Date","status","isDue","dueDate","setDate","getDate","className","name","slice","onClick","Dashboard","props","useState","projects","setProjects","backlog","setBacklog","inProgress","setInProgress","completed","setCompleted","io","socket","saveAndSortProjects","data","console","log","allProjects","map","index","id","sort","a","b","filter","projectStatusHandler","newStatus","emit","useEffect","on","res","disconnect","getItemStyle","isDragging","draggableStyle","userSelect","onDragEnd","result","localState","setLocalState","source","destination","droppableId","sInd","dInd","list","startIndex","endIndex","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","Array","from","destClone","move","newState","group","length","provided","snapshot","ref","innerRef","style","isDraggingOver","padding","droppableProps","i","key","draggableId","draggableProps","dragHandleProps","placeholder","to","AddProjectForm","setName","nameErr","setNameErr","setDueDate","dueDateError","setDueDateError","onSubmit","e","preventDefault","axios","post","then","navigate","catch","err","response","error","keyValue","errorResponse","errors","Object","keys","message","htmlFor","type","value","onChange","nameHandler","target","dueDateHandler","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.600e8fba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Project({ project, callback }) {\r\n    const currentDate = new Date();\r\n    let status = \"warning\";\r\n    let isDue = false;\r\n    if(project.status === \"Completed\") {\r\n        status = \"danger\"\r\n    } else if(project.status === \"In Progress\") {\r\n        status = \"success\"\r\n    }\r\n\r\n    if (new Date(project.dueDate) < currentDate.setDate(currentDate.getDate() - 1) ) {\r\n        isDue = true\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"card item m-2\" >\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-title fs32\">{project.name}</p>\r\n                        {\r\n                            isDue ?\r\n                            <p className=\"text-left text-danger\">Due date: {project.dueDate.slice(0, -14)}</p> :\r\n                            <p className=\"text-left\">Due date: {project.dueDate.slice(0, -14)}</p>\r\n                        }\r\n                    {\r\n                        (project.status === \"Completed\") ?\r\n                            <button onClick={ () => callback(project)} className={\"btn fs28 btn-\" + status}>Remove Project</button>\r\n                        :\r\n                            <button onClick={ () => callback(project)} className={\"btn fs32 btn-\" + status}>{project.status} <strong>></strong></button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project;","import React, { useEffect, useState, Component } from 'react';\r\nimport { Link } from '@reach/router';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport axios from 'axios';\r\nimport Project from './Project';\r\nimport io from 'socket.io-client';\r\n\r\nfunction Dashboard(props) {\r\n    const [projects, setProjects] = useState([])\r\n\r\n    const [backlog, setBacklog] = useState([]);\r\n    const [inProgress, setInProgress] = useState([]);\r\n    const [completed, setCompleted] = useState([]);\r\n    const [socket] = useState(() => io(':8000'));\r\n    // DnD variables\r\n    const [state, setState] = useState(projects);\r\n\r\n\r\n    useEffect(() => {\r\n        // we need to set up all of our event listeners\r\n        // in the useEffect callback function\r\n        console.log('Is this running?');\r\n        socket.on('all projects', saveAndSortProjects);\r\n\r\n        socket.on('update project response', (res) => {\r\n            console.log(\"update received\", res)\r\n        });\r\n        // note that we're returning a callback function\r\n        // this ensures that the underlying socket will be closed if App is unmounted\r\n        // this would be more critical if we were creating the socket in a subcomponent\r\n        return () => socket.disconnect(true);\r\n        // getProjects();\r\n    }, [])\r\n\r\n\r\n    function saveAndSortProjects({ data }) {\r\n        console.log(\"saveAndSortProjects -> data\", data)\r\n        let allProjects = data.map((project, index) => ({ ...project, id: index + \"\" }))\r\n\r\n        setInProgress(allProjects\r\n            .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n            .filter(project => project.status === \"In Progress\"))\r\n\r\n        setBacklog(allProjects\r\n            .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n            .filter(project => project.status === \"Backlog\"))\r\n\r\n        setCompleted(allProjects\r\n            .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n            .filter(project => project.status === \"Completed\"))\r\n\r\n        setProjects(allProjects.map((project, index) => ({ ...project, id: index + \"\" })))\r\n    }\r\n\r\n\r\n\r\n    function deleteProject(project) {\r\n        socket.emit(\"delete project\", project)\r\n    }\r\n\r\n    function projectStatusHandler(project, newStatus) {\r\n\r\n        // if (project.status === \"Completed\") {\r\n        //     deleteProject(project);\r\n        //     return true;\r\n        // }\r\n        switch (project.status) {\r\n            case \"Backlog\":\r\n                project.status = \"In Progress\"\r\n                break;\r\n            case \"In Progress\":\r\n                project.status = \"Completed\"\r\n                break;\r\n            case \"Completed\":\r\n                project.status = \"Backlog\"\r\n                break;\r\n            default:\r\n                console.log(\"some unknown status received\")\r\n        }\r\n        socket.emit('update project', project);\r\n    }\r\n\r\n    // DnD content\r\n\r\n\r\n\r\n    const grid = 10;\r\n\r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: \"none\",\r\n        // padding: grid * 2,\r\n        // margin: `0 0 ${grid}px 0`,\r\n\r\n        // change background colour if dragging\r\n        // background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    const getListStyle = isDraggingOver => ({\r\n        // background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n        padding: grid\r\n    });\r\n\r\n    const reorder = (list, startIndex, endIndex) => {\r\n        const result = [...list];\r\n        const [removed] = result.splice(startIndex, 1);\r\n        result.splice(endIndex, 0, removed);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Moves an item from one list to another list.\r\n     */\r\n    const move = (source, destination, droppableSource, droppableDestination) => {\r\n        // console.log(source);\r\n        const sourceClone = Array.from(source);\r\n        const destClone = Array.from(destination);\r\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n        destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n        const result = {};\r\n        result[droppableSource.droppableId] = sourceClone;\r\n        // console.log(droppableSource.droppableId)\r\n        result[droppableDestination.droppableId] = destClone;\r\n\r\n        return result;\r\n    };\r\n\r\n    function onDragEnd(result) {\r\n        const { source, destination } = result;\r\n        let localState, setLocalState;\r\n        \r\n        console.log(source, destination)\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        if (source.droppableId === \"0\") {\r\n            localState = backlog;\r\n            setLocalState = setBacklog;\r\n        } else if (source.droppableId === \"1\") {\r\n            localState = inProgress;\r\n            setLocalState = setInProgress;\r\n        } else {\r\n            localState = completed;\r\n            setLocalState = setCompleted;\r\n        }\r\n\r\n        const sInd = +source.droppableId;\r\n        const dInd = +destination.droppableId;\r\n        // TODO: fix else statement\r\n        if (sInd === dInd) {\r\n            const items = reorder(\r\n                [...localState],\r\n                result.source.index,\r\n                result.destination.index\r\n            );\r\n\r\n            \r\n            setLocalState(items);\r\n        } else {\r\n            const result = move(projects[sInd], projects[dInd], source, destination);\r\n            const newState = [...projects];\r\n            newState[sInd] = result[sInd];\r\n            newState[dInd] = result[dInd];\r\n\r\n            setProjects(newState.filter(group => group.length));\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <DragDropContext onDragEnd={onDragEnd}>\r\n                        <Droppable droppableId= \"0\">\r\n                            {(provided, snapshot) => (\r\n                                <div className=\"col-4\"\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                >\r\n                                    <div className=\"transparent-background pt-3\">\r\n                                        <h2 className=\"backlog-heading fs40\">Backlog</h2>\r\n                                        <div className=\"projects backlog\">\r\n                                            {\r\n                                                backlog\r\n                                                .map((project, i) => (\r\n                                                    <Draggable\r\n                                                        key={project.id}\r\n                                                        draggableId={project.id}\r\n                                                        index={i}\r\n                                                    >\r\n                                                        {(provided, snapshot) => (\r\n                                                            <div\r\n                                                                ref={provided.innerRef}\r\n                                                                {...provided.draggableProps}\r\n                                                                {...provided.dragHandleProps}\r\n                                                                style={getItemStyle(\r\n                                                                    snapshot.isDragging,\r\n                                                                    provided.draggableProps.style\r\n                                                                )}\r\n                                                            >\r\n                                                                <Project project={project} callback={projectStatusHandler} />\r\n                                                            {provided.placeholder}\r\n                                                            </div>\r\n                                                            )}\r\n                                                    </Draggable>\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                        <Droppable droppableId= \"1\">\r\n                            {(provided, snapshot) => (\r\n                                <div className=\"col-4 \"\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                >\r\n                                    <div className=\"transparent-background pt-3\">\r\n                                        <h2 className=\"in-progress-heading fs40\">In Progress</h2>\r\n                                        <div className=\"projects in-progress\">\r\n                                            {\r\n                                                inProgress\r\n                                                .map((project, i) => (\r\n                                                    <Draggable\r\n                                                        key={project.id}\r\n                                                        draggableId={project.id}\r\n                                                        index={i}\r\n                                                    >\r\n                                                        {(provided, snapshot) => (\r\n                                                            <div\r\n                                                                ref={provided.innerRef}\r\n                                                                {...provided.draggableProps}\r\n                                                                {...provided.dragHandleProps}\r\n                                                                style={getItemStyle(\r\n                                                                    snapshot.isDragging,\r\n                                                                    provided.draggableProps.style\r\n                                                                )}\r\n                                                            >\r\n                                                                <Project project={project} callback={projectStatusHandler} />\r\n                                                            {provided.placeholder}\r\n                                                            </div>\r\n                                                            )}\r\n                                                    </Draggable>\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                        <Droppable droppableId= \"2\">\r\n                            {(provided, snapshot) => (\r\n                                <div className=\"col-4 \"\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                >\r\n                                    <div className=\"transparent-background pt-3\">\r\n                                        <h2 className=\"completed-heading fs40\">Completed</h2>\r\n                                        <div className=\"projects completed\">\r\n                                            {\r\n                                                completed\r\n                                                .map((project, i) => (\r\n                                                    <Draggable\r\n                                                        key={project.id}\r\n                                                        draggableId={project.id}\r\n                                                        index={i}\r\n                                                    >\r\n                                                        {(provided, snapshot) => (\r\n                                                            <div\r\n                                                                ref={provided.innerRef}\r\n                                                                {...provided.draggableProps}\r\n                                                                {...provided.dragHandleProps}\r\n                                                                style={getItemStyle(\r\n                                                                    snapshot.isDragging,\r\n                                                                    provided.draggableProps.style\r\n                                                                )}\r\n                                                            >\r\n                                                                <Project project={project} callback={projectStatusHandler} />\r\n                                                            {provided.placeholder}\r\n                                                            </div>\r\n                                                            )}\r\n                                                    </Draggable>\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col text-left p-3\">\r\n                        <Link className=\"btn  fs32 btn-success\" to=\"projects/new\">\r\n                            <div className=\"plus radius mr-2\"></div>\r\n                            Add New Project\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\r\nimport { Link, navigate } from '@reach/router';\r\nimport axios from 'axios';\r\n\r\nfunction AddProjectForm() {\r\n    const [name, setName] = useState(\"\");\r\n    const [nameErr, setNameErr] = useState(\"\");\r\n    const [dueDate, setDueDate] = useState(\"\");\r\n    const [dueDateError, setDueDateError] = useState(\"\");\r\n\r\n    function nameHandler({ name, value }) {\r\n        setName(value)\r\n        if (value.length < 3) {\r\n            setNameErr(\"Name should be at least 3 characters long\");\r\n        } else {\r\n            setNameErr(\"\");\r\n        }\r\n    }\r\n\r\n    function dueDateHandler({ name, value }) {\r\n        setDueDate(value)\r\n        if (value !== \"\") {\r\n            setDueDateError(\"\");\r\n        }\r\n    }\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n        axios.post('http://localhost:8000/api/projects/new', { name, dueDate })\r\n            .then(res => {\r\n                navigate(\"/\");\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Error happend :(\", err);\r\n                if (err.response.data.error.name === \"MongoError\") {\r\n                    setNameErr(`Project name must be unique, \"${err.response.data.error.keyValue.name}\" has already been taken!`);\r\n                } else {\r\n                    const errorResponse = err.response.data.error.errors; // Get the errors from err.response.data\r\n                    for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                        if (key === \"name\") {\r\n                            setNameErr(errorResponse[key].message);\r\n                        } else {\r\n                            setDueDateError(errorResponse[key].message);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col text-right\">\r\n                        <Link to=\"/\" className=\"fs36 text-dark\">Back To Dashboard</Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row d-flex transparent-background justify-content-center\">\r\n                    <div className=\"col-6 fs32\">\r\n                        <form onSubmit={submitHandler}>\r\n                            <div className=\"form-group\">\r\n                                {nameErr && <p className=\"text-danger fs32\" >{nameErr}</p>}\r\n                                <label htmlFor=\"\" className=\"form-heading fs40\">Project Name: </label>\r\n                                <input type=\"text\" className=\"form-control fs32\" value={name} onChange={e => nameHandler(e.target)} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                {dueDateError && <p className=\"text-danger\" >{dueDateError}</p>}\r\n                                <label htmlFor=\"\" className=\"form-heading fs40\">Due Date: </label>\r\n                                <input type=\"date\" className=\"form-control fs32\" value={dueDate} onChange={e => dueDateHandler(e.target)} />\r\n                            </div>\r\n                            <button className=\"btn  fs32 btn-success\" type=\"submit\">Add Project</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddProjectForm;","import React from 'react';\r\nimport './App.css';\r\nimport { Router } from '@reach/router';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport AddProjectForm from './components/dashboard/AddProjectForm';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n\r\n\r\n            <div className=\"container mt-4\">\r\n                <div className=\"row\">\r\n                    <div className=\"col title-head\">\r\n                        <h1>Project Manager</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Router>\r\n                <Dashboard path=\"/\" />\r\n                <AddProjectForm path=\"projects/new\" />\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}