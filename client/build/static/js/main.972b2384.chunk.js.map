{"version":3,"sources":["components/dashboard/Project.js","components/dashboard/Dashboard.js","components/dashboard/AddProjectForm.js","App.js","serviceWorker.js","index.js"],"names":["Project","project","callback","currentDate","Date","status","isDue","dueDate","setDate","getDate","className","name","slice","onClick","Dashboard","props","useState","setProjects","backlog","setBacklog","inProgress","setInProgress","completed","setCompleted","getProjects","axios","get","then","res","data","allProjects","sort","a","b","filter","projectStatusHandler","delete","_id","id","console","log","catch","err","deleteProject","put","useEffect","map","i","key","to","AddProjectForm","setName","nameErr","setNameErr","setDueDate","dueDateError","setDueDateError","onSubmit","e","preventDefault","post","navigate","response","error","keyValue","errorResponse","errors","Object","keys","message","htmlFor","type","value","onChange","length","nameHandler","target","dueDateHandler","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.972b2384.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Project({ project, callback }) {\r\n    const currentDate = new Date();\r\n    let status = \"warning\";\r\n    let isDue = false;\r\n    if(project.status === \"Completed\") {\r\n        status = \"danger\"\r\n    } else if(project.status === \"In Progress\") {\r\n        status = \"success\"\r\n    }\r\n\r\n    if (new Date(project.dueDate) < currentDate.setDate(currentDate.getDate() - 1) ) {\r\n        isDue = true\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"card m-2\" >\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title text-left\">{project.name}</h5>\r\n                        {\r\n                            isDue ?\r\n                            <p className=\"text-left text-danger\">Due date: {project.dueDate.slice(0,-14)}</p> :\r\n                            <p className=\"text-left\">Due date: {project.dueDate.slice(0,-14)}</p>\r\n                        }\r\n                    {\r\n                       (project.status === \"Completed\") ?\r\n                            <button onClick={ () => callback(project)} className={\"btn btn-block btn-\" + status}>Remove Project</button>\r\n                        :\r\n                            <button onClick={ () => callback(project)} className={\"btn btn-block btn-\" + status}>{project.status} <strong>></strong></button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project;","import React, { useEffect, useState } from 'react';\r\nimport { Link } from '@reach/router';\r\nimport axios from 'axios';\r\nimport Project from './Project';\r\n\r\nfunction Dashboard(props) {\r\n    const [projects, setProjects] = useState([])\r\n\r\n    const [backlog, setBacklog] = useState([]);\r\n    const [inProgress, setInProgress] = useState([]);\r\n    const [completed, setCompleted] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getProjects();\r\n    }, [])\r\n\r\n    function getProjects() {\r\n        axios.get('http://localhost:8001/api/projects/all')\r\n            .then(res => {\r\n                setInProgress(res.data.allProjects\r\n                    .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n                    .filter(project => project.status === \"In Progress\"))\r\n\r\n                setBacklog(res.data.allProjects\r\n                    .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n                    .filter(project => project.status === \"Backlog\"))\r\n\r\n                setCompleted(res.data.allProjects\r\n                    .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\r\n                    .filter(project => project.status === \"Completed\"))\r\n\r\n                setProjects(res.data.allProjects)\r\n            })\r\n    }\r\n\r\n    function deleteProject(project) {\r\n        axios.delete(`http://localhost:8001/api/projects/delete/${project._id}`, { id: project._id })\r\n            .then(res => {\r\n                console.log(\"Successfuly deleted a project: \", res)\r\n                getProjects();\r\n            })\r\n            .catch(err => console.log(\"Error while deleting: \", err))\r\n    }\r\n\r\n    function projectStatusHandler(project) {\r\n        if (project.status === \"Completed\") {\r\n            deleteProject(project);\r\n            return true;\r\n        }\r\n        switch (project.status) {\r\n            case \"Backlog\":\r\n                project.status = \"In Progress\"\r\n                break;\r\n            case \"In Progress\":\r\n                project.status = \"Completed\"\r\n                break;\r\n            default:\r\n                console.log(\"some unknown status received\")\r\n        }\r\n\r\n        axios.put(`http://localhost:8001/api/projects/update/${project._id}`, project)\r\n            .then(res => {\r\n                console.log(\"project successfully updated: \", res)\r\n                getProjects();\r\n            })\r\n            .catch(err => console.log(\"Error happend while updatin project: \", err))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-4\">\r\n                        <h2 className=\"text-primary border\">Backlog</h2>\r\n                        <div className=\"projects border\">\r\n                            {\r\n                                backlog.map((project, i) => <Project key={i} project={project} callback={projectStatusHandler} />)\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <h2 className=\"text-warning border\">In Progress</h2>\r\n                        <div className=\"projects border\">\r\n                            {\r\n                                inProgress.map((project, i) => <Project key={i} project={project} callback={projectStatusHandler} />)\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <h2 className=\"text-success border\">Completed</h2>\r\n                        <div className=\"projects border\">\r\n                            {\r\n                                completed.map((project, i) => <Project key={i} project={project} callback={projectStatusHandler} />)\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col text-left p-3\">\r\n                        <Link className=\"btn btn-primary\" to=\"projects/new\">\r\n                            <div className=\"plus radius mr-2\"></div>\r\n                            Add New Project\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\r\nimport { Link, navigate } from '@reach/router';\r\nimport axios from 'axios';\r\n\r\nfunction AddProjectForm() {\r\n    const [name, setName] = useState(\"\");\r\n    const [nameErr, setNameErr] = useState(\"\");\r\n    const [dueDate, setDueDate] = useState(\"\");\r\n    const [dueDateError, setDueDateError] = useState(\"\");\r\n\r\n    function nameHandler({ name, value }) {\r\n        setName(value)\r\n        if(value.length < 3) {\r\n            setNameErr(\"Name should be at least 3 characters long\");\r\n        } else {\r\n            setNameErr(\"\");\r\n        }\r\n    }\r\n\r\n    function dueDateHandler({ name, value }) {\r\n        setDueDate(value)\r\n        if(value != \"\") {\r\n            setDueDateError(\"\");\r\n        }\r\n    }\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n        axios.post('http://localhost:8001/api/projects/new', {name, dueDate})\r\n        .then(res => {\r\n            navigate(\"/\");\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Error happend :(\", err);\r\n            if (err.response.data.error.name === \"MongoError\") {\r\n                setNameErr(`Project name must be unique, \"${err.response.data.error.keyValue.name}\" has already been taken!`);\r\n            } else {\r\n                const errorResponse = err.response.data.error.errors; // Get the errors from err.response.data\r\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                    if(key === \"name\") {\r\n                        setNameErr(errorResponse[key].message);\r\n                    } else {\r\n                        setDueDateError(errorResponse[key].message);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col text-right\">\r\n                        <Link to=\"/\">Back To Dashboard</Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <div className=\"col-6\">\r\n                        <form onSubmit={submitHandler}>\r\n                            <div className=\"form-group\">\r\n                                {nameErr && <p className=\"text-danger\" >{nameErr}</p>}\r\n                                <label htmlFor=\"\">Project Name: </label>\r\n                                <input type=\"text\" className=\"form-control\" value={name} onChange={e => nameHandler(e.target)} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                {dueDateError && <p className=\"text-danger\" >{dueDateError}</p>}\r\n                                <label htmlFor=\"\">Due Date: </label>\r\n                                <input type=\"date\" className=\"form-control\" value={dueDate} onChange={e => dueDateHandler(e.target)} />\r\n                            </div>\r\n                            <button className=\"btn btn-success btn-block\" type=\"submit\">Add Project</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddProjectForm;","import React from 'react';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport Dashboard from './components/dashboard/Dashboard';\nimport AddProjectForm from './components/dashboard/AddProjectForm';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n\n            <div className=\"container mt-4\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h1>Project Manager</h1>\n                    </div>\n                </div>\n            </div>\n            <Router>\n                <Dashboard path=\"/\" />\n                <AddProjectForm path=\"projects/new\" />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}